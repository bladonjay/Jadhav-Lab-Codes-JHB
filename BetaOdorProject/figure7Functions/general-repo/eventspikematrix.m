function [spkmat] = eventspikematrix(samples,unitstruct,before,binsize)
% function [spkmat] =  eventspikematrix(samples,unitstruct,before,binsize)
% INPUTS:
%   samples: takes first colum of dataset as the start timestamps
%
%   unitstruct: unit struct with units as field
%
%   before: empty, scalar or vector thats the same size as samples,
%   negative gets you before, positive gets after initial samples event
%
%   binsize: scalar or vector of time windows yu want to take from the start
%   vector after correcting for the before time
%
% spkmat = samplespikematrix(samples, unitdataday1, unitdataday2, ...)
% varargin= unitdata, with field units. this should be only one struct
% Generated by sam Mackenzie, fixed by JH Bladon


% set before
if ~exist('before','var')
    before=zeros([1,size(samples,1)]);
elseif isempty(before)
    before=zeros([1,size(samples,1)]);
elseif length(before)<2
    before=repmat(before(1),[1,size(samples,1)]);
elseif length(before)~=length(samples(:,1))
    warning('before is not equivalent to samples, using first interval');
    before=repmat(before(1),[1,size(samples,1)]);
else
    before=before(:);
end

% set after
if ~exist('binsize','var')
    binsize=repmat(2,[1,size(samples,1)]);
elseif isempty(binsize)
    binsize=repmat(2,[1,size(samples,1)]);
elseif length(binsize)<2
    binsize=repmat(binsize(1),[1,size(samples,1)]);
elseif length(binsize)~=length(samples(:,1))
    warning('after is not equivalent to samples, using first interval');
    binsize=repmat(binsize(1),[1,size(samples,1)]);
else
    binsize=binsize(:);
end

before=before(:); binsize=binsize(:);

%%%%%%%%%%

% set up our samples mat
newsamples=samples(:,1)+before; 
% subtract the start for each sample
% now do after (this is after the new before, not after the initial ts
% though****
newsamples(:,2)=newsamples(:,1)+binsize; % pull after ts

%%%%%%%%%%%%%%%%
% set up initial
nunits = 0;
spkmat = zeros(size(samples,1),0);

% pull units
if isfield(unitstruct,'units')
    nunits = numel(unitstruct.units);
elseif isfield(unitstruct,'neurons')
    nunits = numel(unitstruct.neurons);
elseif length(unitstruct)>1
    nunits=length(unitstruct);
end

% for each unit:
for n = 1:nunits
    
    % spk is the spike timestamps of that unit
    if isfield(unitstruct,'units')
        spk = unitstruct.units(n).ts(:);
    elseif isfield(unitstruct,'neurons')
        spk = unitstruct.neurons{n}.timestamps(:);
    else
        spk=unitstruct(n).ts;
    end
   
    % here is were we pull spkmat, for each trial:
    for s = 1:size(samples,1)
        % heres where the function is performed- find the spikes
        % after this sample but before the end
        thissample = (spk(:,1)>=newsamples(s,1) & spk(:,1)<newsamples(s,2));
        % returns a boolean for which spikes are in that window
        nspks = sum(thissample)/binsize(s); % Count the Number of SPiKeS divide by time
        spkmat(s,n) = nspks; % Store the rate in the spike matrix.
    end
end

% clear out cells that never fire
%allrates=sum(spkmat);
%spkmat(:,allrates==0)=[];

end
